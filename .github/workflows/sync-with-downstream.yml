# this workflow will be triggerd by
# 1. maually on GitHub UI
# 2. API request from actiontech/sqle

name: Sync with SYNC_DOWNSTREAM

on:
  workflow_dispatch: # click the button on Github repo!

jobs:
  sync_latest_from_downstream:
    if: endsWith(github.ref, '-ee')
    runs-on: ubuntu-latest
    name: Sync latest commits from LZS911/downstream
    steps:
      # get ${branch_name} from refs/heads/${branch_name}
      # Becouse refs/heads/${branch_name} format is not recognized by aormsby/Fork-Sync-With-Upstream-action@v3.0
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Trim ee suffix
        id: trim-ee-suffix
        run: |
          branch_name=${{ env.GITHUB_REF_NAME }}
          suffix="-ee"
          echo "::set-output name=substr-of-branch_name::${branch_name%$suffix}"

      # run a standard checkout action, provided by GitHub
      - name: Checkout target repo
        uses: actions/checkout@v2
        with:
          ref: ${{steps.trim-ee-suffix.outputs.substr-of-branch_name}}
          persist-credentials: false

      - name: Sync downstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.0
        with:
          target_sync_branch: ${{steps.trim-ee-suffix.outputs.substr-of-branch_name}}
          target_repo_token: ${{ secrets.UPSTREAM_REPO_SECRET }}
          upstream_sync_branch: ${{steps.trim-ee-suffix.outputs.substr-of-branch_name}}
          upstream_sync_repo: LZS911/downstream
          upstream_repo_access_token: ${{ secrets.UPSTREAM_REPO_SECRET }}
          # add --allow-unrelated-histories, otherwise got ERROR message "fatal: refusing to merge unrelated histories"
          # add -Xtheirs, other ERROR message "Automatic merge failed; fix conflicts and then commit the result."
          upstream_pull_args: '--no-edit --allow-unrelated-histories -Xtheirs'

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.UPSTREAM_REPO_SECRET }}
          INTERNAL_API_URL: ${{ secrets.INTERNAL_API_URL }}
          INTERNAL_API_TOKEN: ${{ secrets.INTERNAL_API_TOKEN }}
        run: |
          # 检查是否已经存在从 main 到 main-ee 的 PR
          existing_pr=$(gh pr list --base main-ee --head main --json number --jq '.[0].number')

          if [ -z "$existing_pr" ]; then
            # 如果不存在，创建新的 PR
            new_pr=$(gh pr create --base main-ee --head main \
              --title "Sync main to main-ee" \
              --body "Automatically created PR to sync changes from main to main-ee")

            # 获取新创建的 PR 编号
            pr_number=$(echo $new_pr | grep -oP '#\K\d+')

            echo "Created new PR $new_pr - #$pr_number"
            
            # 检查新创建的 PR 是否有冲突
            merge_status=$(gh pr view $pr_number --json mergeable -q '.mergeable')

            if [ "$merge_status" = "CONFLICTING" ]; then
              # 创建新分支
              new_branch="sync-main-to-main-ee-$(date +%Y%m%d%H%M%S)"
              git checkout -b $new_branch
              git push origin $new_branch
              
              # 创建新的 PR
              new_pr=$(gh pr create --base main-ee --head $new_branch \
                --title "Sync main to main-ee (resolved conflicts)" \
                --body "Automatically created PR to sync changes from main to main-ee. This PR was created to resolve conflicts.")
              
              # 关闭旧的 PR
              gh pr close $pr_number --comment "Closing due to conflicts. New PR created: $new_pr"
            else
             echo "Created new PR #$pr_number without conflicts."
            
          else
            echo "A PR from main to main-ee already exists (PR #$existing_pr). Checking for conflicts..."
            
            # 检查是否有冲突
            merge_status=$(gh pr view $existing_pr --json mergeable -q '.mergeable')
            echo "Conflicts value: '$merge_status'"

            if [ "$merge_status" = "CONFLICTING" ]; then
              echo "Conflicts detected. Creating new branch and PR..."
              
              # 创建新分支
              new_branch="sync-main-to-main-ee-$(date +%Y%m%d%H%M%S)"
              git checkout -b $new_branch
              git push origin $new_branch
              
              # 创建新的 PR
              new_pr=$(gh pr create --base main-ee --head $new_branch \
                --title "Sync main to main-ee (resolved conflicts)" \
                --body "Automatically created PR to sync changes from main to main-ee. This PR was created to resolve conflicts.")
              
              # 关闭旧的 PR
              gh pr close $existing_pr --comment "Closing due to conflicts. New PR created: $new_pr"
              

            else
              echo "Existing PR has no conflicts."
            fi
          fi
